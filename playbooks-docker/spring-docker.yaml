---
- hosts: docker-vm

  tasks:
    - name: Check if Docker is installed
      shell: docker --version && docker compose version
      register: docker_version_result
      ignore_errors: true

    - name: Set Docker installed fact
      set_fact:
        docker_installed: "{{ docker_version_result.rc == 0 }}"

    - name: Include install_docker playbook if Docker is not installed
      include_tasks: install-docker.yaml
      when: not docker_installed

    - name: "Clone the Spring repository"
      git:
        repo: "https://github.com/KaratziasK/DS-project.git"
        dest: "{{ appdir }}"
        version: "{{ branch }}"
        force: yes

    - name: Copy docker-compose.yaml and Dockerfile into appdir
      copy:
        src: "{{ item.src }}"
        dest: "{{ appdir }}/{{ item.dest }}"
        mode: '0644'
      loop:
        - { src: "docker-compose.yaml", dest: "docker-compose.yaml" }
        - { src: "nonroot-multistage.Dockerfile", dest: "nonroot-multistage.Dockerfile" }

    - name: "Populate application.properties for DB"
      lineinfile:
        dest: "{{ application_properties_dir }}"
        state: present
        regexp: "^{{item.key}}="
        line: "{{item.key}}={{item.value}}"
      with_items:
        - "{{ app_docker.env | dict2items }}"

    - name: "Populate application.properties with email credentials"
      lineinfile:
        dest: "{{ application_properties_dir }}"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      with_items:
        - { regexp: '^spring.mail.username=', line: "spring.mail.username={{ EMAIL_USERNAME }}" }
        - { regexp: '^spring.mail.password=', line: "spring.mail.password={{ EMAIL_PASSWORD }}" }

    - name: Check if Docker Compose project is running
      command: docker compose -f {{ appdir }}/docker-compose.yaml ps -q
      register: running_services
      changed_when: false
      failed_when: false

# Σταματά και αφαιρεί όλα τα containers και networks που ορίζονται στο docker-compose.yaml. (Τα volumes παραμένουν)
    - name: Tear down existing services if they exist
      community.docker.docker_compose_v2:
        project_src: "{{ appdir }}"
        state: absent
      when: running_services.stdout != ""


# Εκτελεί το docker-compose.yaml: κάνει build και ξεκινά τα services σε detached mode
    - name: Create and start services
      become: true
      community.docker.docker_compose_v2:
        project_src: "{{ appdir }}"
        build: always
        state: present
      register: output
      notify: Restart Docker Compose

# Επανεκκινεί όλα τα services που ορίζονται στο docker-compose.yaml
  handlers:
  - name: Restart Docker Compose
    community.docker.docker_compose_v2:
      project_src: "{{ appdir }}"
      state: restarted


