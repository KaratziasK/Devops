pipeline {

agent any

environment {
        DOCKER_TOKEN=credentials('docker-push-secret')
        DOCKER_USER='Kyriakos'
        DOCKER_SERVER='ghcr.io'
        DOCKER_PREFIX='ghcr.io/karatziask/ds-project'
    }

parameters {
        booleanParam(name: 'INSTALL_POSTGRES', defaultValue: true, description: 'Install PostgreSQL')
        booleanParam(name: 'INSTALL_SPRING', defaultValue: true, description: 'Install Spring Boot app')
        booleanParam(name: 'DOCKER_BUILD_PUSH', defaultValue: true, description: 'Docker build and push packages')
        booleanParam(name: 'CLONE_REPO', defaultValue: true, description: 'Clone DS-project')
    }

stages {

    stage('Clone DS-project') {
        when {
                expression { return params.CLONE_REPO }
        }
        steps {
            build job: 'DS-project'
        }
    }


    stage('Tests Spring-Boot') {
        steps {
            sh '''
                pwd
                cd ..
                cd DS-project
                echo "Start testing"
                ./mvnw test
            '''
        }
    }

    stage('Docker build and push') {
        when {
                expression { return params.DOCKER_BUILD_PUSH }
        }
    steps {
        sh '''
        # Εδώ υποθέτουμε $WORKSPACE = /var/lib/jenkins/workspace/run-app-pipeline
        APP_WS=$(dirname "$WORKSPACE")/DS-project

        docker build \
            -f $WORKSPACE/playbooks-docker/nonroot-multistage.Dockerfile \
            -t $DOCKER_PREFIX:${GIT_COMMIT}-${BUILD_NUMBER} \
            -t $DOCKER_PREFIX:latest \
            "$APP_WS"

        echo "$DOCKER_TOKEN" | docker login $DOCKER_SERVER -u $DOCKER_USER --password-stdin
        docker push $DOCKER_PREFIX:${GIT_COMMIT}-${BUILD_NUMBER}
        docker push $DOCKER_PREFIX:latest
        '''
        }
    }

stage('Install postgres') {
             when {
                expression { return params.INSTALL_POSTGRES }
            }
            steps {
                sh '''
                    export ANSIBLE_CONFIG=~/workspace/ansible/ansible.cfg
                    ansible-playbook -i ~/workspace/ansible/hosts.yaml -l dbserver-vm ~/workspace/ansible/playbooks/postgres-16.yaml
                '''
            }
        }

        stage('install springboot') {
             when {
                expression { return params.INSTALL_SPRING }
            }
            steps {
                sh '''
                    export ANSIBLE_CONFIG=~/workspace/ansible/ansible.cfg
                    ansible-playbook -i ~/workspace/ansible/hosts.yaml -l appserver-vm ~/workspace/ansible/playbooks/spring.yaml
                '''
            }
        }
}

}