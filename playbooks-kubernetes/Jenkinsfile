pipeline {

agent any

environment {
        DOCKER_TOKEN=credentials('docker-push-secret')
        DOCKER_USER='Kyriakos'
        DOCKER_SERVER='ghcr.io'
        DOCKER_PREFIX='ghcr.io/karatziask/ds-project'
    }

parameters {
        booleanParam(name: 'CLONE_REPO', defaultValue: true, description: 'Clone DS-project')
        booleanParam(name: 'RUN_SPRINGBOOT_TESTS', defaultValue: true, description: 'Run tests for DS-project')
        booleanParam(name: 'DOCKER_BUILD_PUSH', defaultValue: true, description: 'Docker build and push packages')
        
    }

stages {

    stage('Clone DS-project') {
        when {
                expression { return params.CLONE_REPO }
        }
        steps {
            build job: 'DS-project'
        }
    }


    stage('Tests Spring-Boot') {
        when {
                expression { return params.RUN_SPRINGBOOT_TESTS }
        }
        steps {
            sh '''
                pwd
                cd ..
                cd DS-project
                echo "Start testing"
                ./mvnw test
            '''
        }
    }

    stage('Docker build and push') {
        when {
                expression { return params.DOCKER_BUILD_PUSH }
        }
    steps {
        sh '''
        # Εδώ υποθέτουμε $WORKSPACE = /var/lib/jenkins/workspace/test-project-and-push-packages
        APP_WS=$(dirname "$WORKSPACE")/DS-project

        docker build \
            -f $WORKSPACE/playbooks-docker/nonroot-multistage.Dockerfile \
            -t $DOCKER_PREFIX:${GIT_COMMIT}-${BUILD_NUMBER} \
            -t $DOCKER_PREFIX:latest \
            "$APP_WS"

        echo "$DOCKER_TOKEN" | docker login $DOCKER_SERVER -u $DOCKER_USER --password-stdin
        docker push $DOCKER_PREFIX:${GIT_COMMIT}-${BUILD_NUMBER}
        docker push $DOCKER_PREFIX:latest
        '''
        }
    }

}

}