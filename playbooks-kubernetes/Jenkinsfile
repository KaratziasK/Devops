pipeline {

agent any

environment {
        DOCKER_TOKEN=credentials('docker-push-secret')
        DOCKER_USER='Kyriakos'
        DOCKER_SERVER='ghcr.io'
        DOCKER_PREFIX='ghcr.io/karatziask/ds-project'
    }

parameters {
        booleanParam(name: 'CLONE_REPO_DS_Project', defaultValue: true, description: 'Clone DS-project')
        booleanParam(name: 'CLONE_REPO_WITH_ANSIBLE', defaultValue: true, description: 'Clone Devops repo')
        booleanParam(name: 'RUN_SPRINGBOOT_TESTS', defaultValue: true, description: 'Run tests for DS-project')
        booleanParam(name: 'DOCKER_BUILD_PUSH', defaultValue: true, description: 'Docker build and push packages')
        booleanParam(name: 'UPDATE_MICROK8S_WITH_NEW_IMAGES', defaultValue: true, description: 'Rollout with new images')
    }

stages {

    stage('Clone repo DS-project') {
        when {
                expression { return params.CLONE_REPO_DS_Project }
        }
        steps {
            build job: 'DS-project'
        }
    }

    stage('Clone repo Devops') {
        when {
                expression { return params.CLONE_REPO_WITH_ANSIBLE }
        }
        steps {
            build job: 'ansible-playbooks'
        }
}



    stage('Tests Spring-Boot') {
        when {
                expression { return params.RUN_SPRINGBOOT_TESTS }
        }
        steps {
            sh '''
                pwd
                cd ..
                cd DS-project
                echo "Start testing"
                ./mvnw test
            '''
        }
    }

    stage('Docker build and push') {
        when {
                expression { return params.DOCKER_BUILD_PUSH }
        }
    steps {
        sh '''
        APP_WS=$(dirname "$WORKSPACE")/DS-project

        # Create tag
        HEAD_COMMIT=$(git rev-parse --short HEAD)
        TAG=${HEAD_COMMIT}-${BUILD_NUMBER}
        echo "Using TAG: $TAG"

        docker build \
            -f $WORKSPACE/playbooks-docker/nonroot-multistage.Dockerfile \
            -t $DOCKER_PREFIX:$TAG \
            -t $DOCKER_PREFIX:latest \
            "$APP_WS"

        echo "$DOCKER_TOKEN" | docker login $DOCKER_SERVER -u $DOCKER_USER --password-stdin
        docker push $DOCKER_PREFIX:$TAG
        docker push $DOCKER_PREFIX:latest
        '''
        }
    }

    stage('deploy to kubernetes') {
        when {
                expression { return params.UPDATE_MICROK8S_WITH_NEW_IMAGES }
        }
            steps {
                sh '''
                    HEAD_COMMIT=$(git rev-parse --short HEAD)
                    TAG=$HEAD_COMMIT-$BUILD_ID
                    export ANSIBLE_CONFIG=$WORKSPACE/ansible-playbooks/ansible.cfg
                    ansible-playbook -i ~/workspace/ansible-playbooks/hosts.yaml -e new_image=$DOCKER_PREFIX:$TAG ~/workspace/ansible-playbooks/playbooks-microk8s/k8s-update-spring-deployment.yaml
                '''
            }
        }

}

}